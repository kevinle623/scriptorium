{
	"info": {
		"_postman_id": "00c0689b-beae-4a39-8929-4059abee70ee",
		"name": "scriptorium backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30523314"
	},
	"item": [
		{
			"name": "live",
			"item": [
				{
					"name": "health check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/live",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"live"
							]
						},
						"description": "This endpoint is a health check to indicate if the server is running and up. It makes an HTTP GET request to [http://localhost:3000/api/live](http://localhost:3000/api/live) and returns a status code of 200 with a JSON response containing a message field."
					},
					"response": []
				}
			],
			"description": "First let's make sure that the server is running properly. This \"live\" endpoint does a basic ping to ensure that the server is running."
		},
		{
			"name": "auth",
			"item": [
				{
					"name": "register user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"const requestString= pm.request.body.raw",
									"const requestBody = JSON.parse(requestString)",
									"",
									"pm.test(requestBody.email)",
									"pm.test(requestBody.password)",
									"",
									"pm.environment.set(\"userEmail\", String(requestBody.email));",
									"pm.environment.set(\"userPassword\", String(requestBody.password));",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(response.user.id)",
									"pm.environment.set(\"userId\", response.user.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"user@gmail.com\",\n    \"phone\": \"+16479903830\",\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"password\": \"12345\",\n    \"role\": \"user\",\n    \"avatar\": \"https://example.com/avatar.png\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/register",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.environment.set(\"accessToken\", responseJson[\"accessToken\"]);",
									"pm.environment.set(\"refreshToken\", responseJson[\"refreshToken\"]);",
									"",
									"const response = pm.response.json();",
									"",
									"pm.test(response.user.id)",
									"pm.environment.set(\"userId\", response.user.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{userEmail}}\",\n    \"password\": \"{{userPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.environment.set(\"accessToken\", responseJson.accessToken);",
									"pm.environment.set(\"refreshToken\", responseJson.refreshToken);",
									"pm.environment.set(\"userId\", responseJson.user.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"adminEmail\", \"admin@gmail.com\");",
									"pm.environment.set(\"addminPassword\", \"12345\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{adminUser}}\",\n    \"password\": \"{{adminPassword}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "refresh",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();",
									"",
									"pm.environment.set(\"accessToken\", responseJson[\"accessToken\"]);",
									"pm.environment.set(\"refreshToken\", responseJson[\"refreshToken\"]);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/refresh",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// pm.environment.set(\"accessToken\", undefined);",
									"// pm.environment.set(\"refreshToken\", undefined);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImVtYWlsIjoia2V2aW5AZ21haWwuY29tIiwicm9sZSI6InVzZXIiLCJpYXQiOjE3MzAzNDIwNDQsImV4cCI6MTczMDM0NTY0NH0.Wsl8Zvgioc4-2vOyjhaAXnXoslVQyRVEY5oaE0AWeAA",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"refreshToken\": \"{{refreshToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/logout",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"logout"
							]
						}
					},
					"response": []
				}
			],
			"description": "This directory holds all endpoints relating to authentication and authorization. The `login user` and `login admin` is recommended to be ran before going to other directories to automatically associate environment `accessToken` and `refreshToken` variables that will use in other requests in other directories."
		},
		{
			"name": "users",
			"item": [
				{
					"name": "get user profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImVtYWlsIjoia2V2aW5AZ21haWwuY29tIiwicm9sZSI6InVzZXIiLCJpYXQiOjE3MzAzNDI2ODYsImV4cCI6MTczMDM0NjI4Nn0.HDcN1URgh3LI7swbCe3VP4etfgQAWLyw8d436dfopK0",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:3000/api/users/{{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "",
								"value": "",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Newname2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/users/{{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Before trying requests in this user folder, make sure you have ran any of the login requests in the auth folder of this postman request."
		},
		{
			"name": "code templates",
			"item": [
				{
					"name": "execute",
					"item": [
						{
							"name": "python",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"language\": \"python\",\n    \"code\": \"print(input().strip())\",\n    \"stdin\": \"Hello, World!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/code/execute",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"code",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "c++",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"language\": \"c++\",\n    \"code\": \"#include <iostream>\\n#include <string>\\nint main() {\\n    std::string input;\\n    std::getline(std::cin, input);\\n    std::cout << input << std::endl;\\n    return 0;\\n}\",\n    \"stdin\": \"Hello, World!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/code/execute",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"code",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "c",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"language\": \"c\",\n    \"code\": \"#include <stdio.h>\\n#define BUFFER_SIZE 100\\nint main() {\\n    char input[BUFFER_SIZE];\\n    if (fgets(input, BUFFER_SIZE, stdin) != NULL) {\\n        printf(\\\"%s\\\", input);\\n    }\\n    return 0;\\n}\",\n    \"stdin\": \"Hello, World!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/code/execute",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"code",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "javascript",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"language\": \"javascript\",\n    \"code\": \"process.stdin.on('data', data => {\\n    console.log(data.toString().trim());\\n    process.exit();\\n});\",\n    \"stdin\": \"Hello, World!\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/code/execute",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"code",
										"execute"
									]
								}
							},
							"response": []
						},
						{
							"name": "java",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"language\": \"java\",\n    \"code\": \"import java.util.Scanner;\\n\\npublic class Main {\\n    public static void main(String[] args) {\\n        Scanner scanner = new Scanner(System.in);\\n        String input = scanner.nextLine();\\n        System.out.println(\\\"You entered: \\\" + input);\\n        scanner.close();\\n    }\\n}\",\n    \"stdin\": \"Hello, Java!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/code/execute",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"code",
										"execute"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "save / create code template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(response.codeTemplate.id)",
									"pm.environment.set(\"codeTemplateId\", response.codeTemplate.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Hello World 2 Example\",\n    \"userId\": {{userId}},\n    \"code\": \"print('Hello, World!')\",\n    \"parentTemplateId\": null,\n    \"language\": \"Python\",\n    \"explanation\": \"This code prints 'Hello, World!' to the console.\",\n    \"tags\": [\"basic\", \"hello world\", \"python\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/code/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"code",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "fork code template",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Hello World 2 Example FORKED\",\n    \"userId\": {{userId}},\n    \"code\": \"print('Hello, World!')\",\n    \"parentTemplateId\": {{codeTemplateId}},\n    \"language\": \"Python\",\n    \"explanation\": \"This code prints 'Hello, World!' to the console.\",\n    \"tags\": [\"basic\", \"hello world\", \"python\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/code/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"code",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "update code template",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"new title\",\n    \"tags\": [\"new\", \"basic\", \"python\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/code/{{codeTemplateId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"code",
								"{{codeTemplateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get code template",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/code/{{codeTemplateId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"code",
								"{{codeTemplateId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get saved code templates",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/code/?userId={{userId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"code",
								""
							],
							"query": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "get code templates",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/code/?tag=python",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"code",
								""
							],
							"query": [
								{
									"key": "tag",
									"value": "python"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Before trying requests in this folder, make sure you have ran any of the login requests in the auth folder of this postman request."
		},
		{
			"name": "blog posts",
			"item": [
				{
					"name": "fetch sorted blog posts",
					"item": [
						{
							"name": "search blog posts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/blogs?tags=Async&codeTemplateIds=1&content=programming&title=typescript",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"blogs"
									],
									"query": [
										{
											"key": "page",
											"value": "1",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "1",
											"disabled": true
										},
										{
											"key": "tags",
											"value": "Async"
										},
										{
											"key": "codeTemplateIds",
											"value": "1"
										},
										{
											"key": "content",
											"value": "programming"
										},
										{
											"key": "title",
											"value": "typescript"
										},
										{
											"key": "",
											"value": "",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "fetch most controversial blog posts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/blogs?orderBy=mostControversial",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"blogs"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "mostControversial"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "fetch most valued blog posts",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/blogs?orderBy=mostValued",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"blogs"
									],
									"query": [
										{
											"key": "orderBy",
											"value": "mostValued"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "comments",
					"item": [
						{
							"name": "comment on blog post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(response.comment.id)",
											"pm.environment.set(\"commentId\", response.comment.id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": {{userId}},\n    \"content\": \"Wow!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/blogs/{{blogPostId}}/comment",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"blogs",
										"{{blogPostId}}",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "get direct comments from blog post",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/blogs/{{blogPostId}}/comment",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"blogs",
										"{{blogPostId}}",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "reply to comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": {{userId}},\n    \"content\": \"you said the same thing before!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/comments/{{commentId}}/comment",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"comments",
										"{{commentId}}",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "get direct replies from comments",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/comments/{{commentId}}/comment",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"comments",
										"{{commentId}}",
										"comment"
									]
								}
							},
							"response": []
						},
						{
							"name": "get comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/comments/{{commentId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"wow edited!\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/comments/{{commentId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "report comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": {{commentId}},\n    \"reason\": \"hurt my feelings\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/comments/{{commentId}}/report",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"comments",
										"{{commentId}}",
										"report"
									]
								}
							},
							"response": []
						},
						{
							"name": "vote comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userId\": {{userId}},\n    \"voteType\": \"UP\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/api/comments/{{commentId}}/rate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"comments",
										"{{commentId}}",
										"rate"
									]
								}
							},
							"response": []
						},
						{
							"name": "get vote for comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/comments/2/rate",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"comments",
										"2",
										"rate"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete comment",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{accessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/comments/{{commentId}}",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": []
						}
					],
					"description": "Before trying requests in this folder, make sure a blog post has been created within `create blog post` in the parent directory."
				},
				{
					"name": "create blog post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(response.blogPost.id)",
									"pm.environment.set(\"blogPostId\", response.blogPost.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Exploring TIMELESS\",\n    \"description\": \"A deep dive into async programming in JavaScript, covering callbacks, promises, and async/await.\",\n    \"content\": \"Asynchronous programming is crucial for developing responsive applications. In this post, we'll explore various approaches to handle async operations in JavaScript, including callbacks, promises, and async/await...\",\n    \"userId\": {{userId}}, \n    \"codeTemplateIds\": [],\n    \"tags\": [\"JavaScript\", \"Async\", \"Programming\", \"Web Development\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/blogs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"blogs"
							]
						}
					},
					"response": []
				},
				{
					"name": "get blog post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/blogs/{{blogPostId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"blogs",
								"{{blogPostId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "vote blog post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{userId}},\n    \"voteType\": \"DOWN\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/blogs/{{blogPostId}}/rate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"blogs",
								"{{blogPostId}}",
								"rate"
							]
						}
					},
					"response": []
				},
				{
					"name": "get vote for blog post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/blogs/{{blogPostId}}/rate",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"blogs",
								"{{blogPostId}}",
								"rate"
							]
						},
						"description": "The endpoint performs an HTTP GET request to rate a specific blog post identified by the blogPostId parameter in the URL. The response returned a status code of 201 and a JSON object with the following schema:"
					},
					"response": []
				},
				{
					"name": "report blog post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{userId}},\n    \"reason\": \"hurt my feelings\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/blogs/{{blogPostId}}/report",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"blogs",
								"{{blogPostId}}",
								"report"
							]
						}
					},
					"response": []
				},
				{
					"name": "update blog post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"new description\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/blogs/{{blogPostId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"blogs",
								"{{blogPostId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete blog post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/blogs/{{blogPostId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"blogs",
								"{{blogPostId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Before trying requests in this folder, make sure you have ran any of the login requests in the auth folder of this postman request.\n\nalso for the nested folders relating to\n\n- `fetch sorted blog posts`\n    \n- `comments`\n    \n\nI suggest ensuring you have created a blog post already with the respective user before going any further into the nested folders. Go to `create blog post` request to do so."
		},
		{
			"name": "admin",
			"item": [
				{
					"name": "toggle hide comment",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hidden\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/comments/2/hide",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"comments",
								"2",
								"hide"
							]
						}
					},
					"response": []
				},
				{
					"name": "toggle hide blog post",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"hidden\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/admin/blogs/2/hide",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"blogs",
								"2",
								"hide"
							]
						}
					},
					"response": []
				},
				{
					"name": "get most reported blog posts",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/blogs",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"blogs"
							]
						},
						"description": "this endpoint only returns blogposts in sorted order and only of REPORTED blog posts. Thus to properly test, I suggest ensuring at least 1 blog post has been reported."
					},
					"response": []
				},
				{
					"name": "get most reported comments",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"admin",
								"comments"
							]
						},
						"description": "this endpoint only returns commnet in sorted order and only of REPORTED comment. Thus to properly test, I suggest ensuring at least 1 comment has been reported."
					},
					"response": []
				}
			],
			"description": "IN ORDER TO RUN THESE ADMIN ENDPOINTS YOU MUST BE LOGGED IN AS ADMIN\n\nBefore trying requests in this folder, make sure you have ran the admin login requests in the auth folder of this postman request - `login admin`"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "adminEmail",
			"value": "admin@gmail.com",
			"type": "string"
		},
		{
			"key": "adminPassword",
			"value": "12345",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "userPassword",
			"value": "",
			"type": "string"
		}
	]
}